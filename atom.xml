<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>NexT</title>
  
  
  <link href="https://theme-next.js.org/atom.xml" rel="self"/>
  
  <link href="https://theme-next.js.org/"/>
  <updated>2021-09-25T03:25:01.177Z</updated>
  <id>https://theme-next.js.org/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title></title>
    <link href="https://theme-next.js.org/1.%E6%88%91%E7%8E%B0%E5%9C%A8%E6%B3%A8%E9%87%8D%E5%AE%8F%E8%A7%82%E5%8D%B4%E4%B8%8D%E6%B3%A8%E9%87%8D%E5%BE%AE%E8%A7%82%EF%BC%8C%E5%85%B6%E5%AE%9E%E6%98%AF%E5%BE%88%E9%94%99%E8%AF%AF%E7%9A%84%E3%80%82/"/>
    <id>https://theme-next.js.org/1.%E6%88%91%E7%8E%B0%E5%9C%A8%E6%B3%A8%E9%87%8D%E5%AE%8F%E8%A7%82%E5%8D%B4%E4%B8%8D%E6%B3%A8%E9%87%8D%E5%BE%AE%E8%A7%82%EF%BC%8C%E5%85%B6%E5%AE%9E%E6%98%AF%E5%BE%88%E9%94%99%E8%AF%AF%E7%9A%84%E3%80%82/</id>
    <published>2021-09-25T03:25:00.995Z</published>
    <updated>2021-09-25T03:25:01.177Z</updated>
    
    <content type="html"><![CDATA[<p>1.我现在注重宏观却不注重微观，其实是很错误的。</p><p>2.如果只有经历才能成长，那人生也太累了呢，为什么要背负无数的风尘？所以说有些事情没有必要经历，看着别人踩坑就好，但要对踩坑者的勇气报以钦佩。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;1.我现在注重宏观却不注重微观，其实是很错误的。&lt;/p&gt;
&lt;p&gt;2.如果只有经历才能成长，那人生也太累了呢，为什么要背负无数的风尘？所以说有些事情没有必要经历，看着别人踩坑就好，但要对踩坑者的勇气报以钦佩。&lt;/p&gt;
</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://theme-next.js.org/%E6%9C%88%E8%89%B2%E4%B8%8D%E7%BE%8E/"/>
    <id>https://theme-next.js.org/%E6%9C%88%E8%89%B2%E4%B8%8D%E7%BE%8E/</id>
    <published>2021-09-24T22:30:39.207Z</published>
    <updated>2021-10-15T22:11:29.463Z</updated>
    
    <content type="html"><![CDATA[<h1 id="可惜，月色不美呢"><a href="#可惜，月色不美呢" class="headerlink" title="可惜，月色不美呢"></a>可惜，月色不美呢</h1><h2 id="序曲"><a href="#序曲" class="headerlink" title="序曲"></a>序曲</h2><p>那时，寂静的月，照亮了夜色。</p><p>“只可惜月色不美呢。”门外的大叔喊道。</p><p>这么晚想必是睡觉的时间，也不会有人在歌唱，耳中只有耳机的隆隆声。</p><p>“哒哒啦哒哒啦”。</p><p>少年摇头晃脑，满脸是很陶醉的样子。</p><p>房灯昏暗，可依然看见满眼的红血丝。</p><p>”好像是哭过了呢“。</p><p>“真是懦弱的男人呢” 少年眼中浮现这样的话语。</p><p>“你这个草包虚大汉”好像是某个长辈的叨叨浮现。</p><p>今晚的月色不美呢。</p><p>父母说：“你可要多带点正能量呢。”</p><p>少年不再作声。</p><p>泪水好像已经蒸发，</p><p>但是盐分倒是在眼睑挥之不去呢。</p><p>多么可笑的官腔呢。</p><h2 id="一、拗动在枝头"><a href="#一、拗动在枝头" class="headerlink" title="一、拗动在枝头"></a>一、拗动在枝头</h2><p>院子里的树，在阳光照耀下，那么的闪耀，金波粼粼，树荫下乘凉的，是儿童的纯真感？</p><p>树荫下的是一个少女，好像是被什么东西笼罩了，满眼像是极受敬慕的女人。</p><p>她双眼明亮，她睫毛长长，像是有点混血的感觉，总之和现在的网红脸根本不能比，人家那可是天然而成的呢。</p><p>”这是goddess？“少年叫道。</p><p>旁边的小伙喊道：”没看出来啊，你喜欢她吗。“</p><p>儿童说：”应该...至少说...大概是...有好感吧。“</p><p>儿童的同伴给他说：”这位姑娘是有男朋友的呢，我也想追的。“</p><p>儿童不做声了。</p><p>要么占有她，要么毁坏她，至少毁坏她在我心中的印象吧。</p><p>爱是自私的，</p><p>儿童虽然不算阳刚，但揍个goddess的娘炮男友还是没啥问题的，儿童找了个机会和同伴一道把她的男友揍了。</p><p>据说，之后她和她的男友分手了。</p><p>可我也不会考虑追求了，我吐了一堆垃圾话给人家，人家也没太当回事。</p><p>后面听到老爹说了一声：“熊叔叔的女儿去英国读书了，熊叔叔是个作家挺有钱的。”</p><p>我问：“叫什么来着”</p><p>老爹：”xx“（具体名字不写，涉及隐私）</p><p>老爹：”你喜欢？“</p><p>我：”认识而已。“</p><p>内心不由得苦笑起来，但我早不抱希望了。</p><p>一个女人，你把她当godness后，终究是可望不可及的存在罢了。</p><p>那拗动在枝头的，一个男人对女生最初的感情，就这样渐渐消逝了。</p><p>但是这对一个男人对女人品味的影响至今都在吧。</p><h2 id="二、后悔的事情"><a href="#二、后悔的事情" class="headerlink" title="二、后悔的事情"></a>二、后悔的事情</h2><p>为什么我之后一阵有点舔狗呢？大概是出于对于小雅（王诗雅）的愧疚吧。</p><p>小学五六年级时班上转来一个蛮可爱的女生，小雅，每次微机课都坐在我旁边，我不知道她是不是有意接近我。</p><p>至于她经常说的便是：”哇塞你好厉害呢。“被仰慕也是很爽的感觉呢。</p><p>一看还是蛮可爱的嘛。</p><p>写了卷子会时不时问问人家成绩，比人家高会开心，比人家低会沮丧，</p><p>“我是怎么了？”我在想。</p><p>后面发现人家会很在意我呢。</p><p>感觉脸红滚滚的呢，我不由得去水房冲脸.</p><p>“怎么了，我是怎么了？”</p><p>我突然间发现自己有点喜欢这个女生了，我想：”这该如何呢？可不能就此沦陷呢。满脑子都是她的话，会破坏自己原有的平静的“</p><p>一定要找个让自己不喜欢她的理由呢，我这样想。</p><p>”雀斑“我找到了她的软肋。</p><p>一下子她在我心中变得好像不再美好了。</p><p>可是见到她，还是对她充满了好感。</p><p>直到有一天，我当时的死党，小浩和小贾，要在微机课前来我这坐，</p><p>小雅不知怎么的，生气了，说：”应该是人家坐这的，你能不能走开。“</p><p>小景笑了笑：”是不是你喜欢他啊。”小景指了指我“小雅。“</p><p>小雅默不作声，脸却没有红。</p><p>我这时用了恶劣的手段撇清关系：”不，一定只是她自己的胡思乱想吧。“</p><p>当时班级里男生会对任何有男女感情的人有奇怪的羞辱方式，扒掉裤子，被踹裤裆，被排斥都是家常便饭的事。</p><p>可是这种规则对扛把子一样的人物并不适用，像艾力哈默（维族），土蒙（蒙古）这样的人物，谈个恋爱算什么呢。</p><p>在集体面前，我很弱小。</p><p>只有强者才配拥有感情。</p><p>这是我在当时的环境下的偏激感受。</p><h2 id="三、不要编造喜欢某个人，做为拒绝另外一个人的理由（上）"><a href="#三、不要编造喜欢某个人，做为拒绝另外一个人的理由（上）" class="headerlink" title="三、不要编造喜欢某个人，做为拒绝另外一个人的理由（上）"></a>三、不要编造喜欢某个人，做为拒绝另外一个人的理由（上）</h2><p>“我喜欢你”一个女生满带微笑，带着她的闺蜜，堵在少年放学的路上。</p><p>少年愣了一下，本来想着用温柔点的口气拒绝，我的一个玩伴给我说那个女生是个傻子，脑子不太正常，少年便吐糟到：“傻了？”随后一句不说走开。</p><p>少年回家给爸爸说：“今天有个女生给我表白了，怎么办”</p><p>爸爸说：“你是不是在意淫.”</p><p>少年的阴郁无法排解：“真的，她说..”</p><p>爸爸说：“你™的在意淫吧.你他妈的胡思乱想，不打篮球，不弹吉他，以后看看有什么女生喜欢你。&quot;</p><p>根本没有耐心嘛...</p><p>一天，我像大老师似的观察周围的人群，听到班上女生说话，那个蒙族的女生说：“那个男生说我傻。”</p><p>旁边的女生说：“他会不会是傲娇的吧”</p><p>当少年的母亲给他报补习班的时候，少年没有想到的是，她的妈妈竟然和少年的母亲在一个单位。</p><p>“阿姨什么补习班啊，我也想报。”</p><p>少年上着补习班眼见那个魔鬼进入，顿时没了看书的兴趣。</p><p>“妈，我不去补习班了。”</p><p>”你为啥要把你单位那个同事的孩子带过去呢？“</p><p>”儿子，我问了我同事，他们家女儿没那个想法“我妈说这句话的时候，我真佩服他们上一代人的情商。</p><p>少年睡觉时感觉好像有鬼魂笼罩，难以入眠，仿佛想起了蒙古铁骑对中国的屠戮，而现在，那些恶魔的后代，却要侵犯自己的独处空间，真是不知廉耻呢。</p><p>儿子给父亲说：”怎么拒绝一个讨厌的女生好呢？“</p><p>父亲说：”这个你不要管，你学习就行了，你是不是喜欢那个姑娘。“</p><p>但是又一次少年被追着表白：少年指着另外一边的女生说：“那边那个女生，我喜欢她”</p><p>结果莫名其妙我成为了全班人口中的渣男，打听后才知道，那帮女生不知道怎么产生了很多幻想，当然细节也不想提起。</p><h2 id="四、不要编造喜欢某个人，做为拒绝另外一个人的理由（下）"><a href="#四、不要编造喜欢某个人，做为拒绝另外一个人的理由（下）" class="headerlink" title="四、不要编造喜欢某个人，做为拒绝另外一个人的理由（下）"></a>四、不要编造喜欢某个人，做为拒绝另外一个人的理由（下）</h2><p>突然反应过来，我指着的女孩，是我前面稀里糊涂追了半个学期的女生，小瑶，其实也说不上喜欢，只是感觉人家写作业很快，准确率还挺高，想问下别人技巧，我表哥说是我爱上了，我当时有点崇拜自己的表哥吧，家里长辈都夸他情商高，让我多学点，他过来问我：”要不要我教你怎么攻略人家啊。“</p><p>我让他说，就当是一种学习，他就说你要冲过去在大家面前给他表白，要穷追不舍。</p><p>问父亲，父亲说：”儿子啊，你弱了，人家不喜欢你，你强了，女人来追你，你看马斯克，换了多少个女友，当然有钱了，人家可能只是图你钱，爸爸就有你妈啊，你妈矮个子，不过你妈倒是人很老实。“</p><p>结果我发现那个女生轻轻摇头，双颊的白皙中泛着红晕，却又和别的女生议论起我，是有点吊着当备胎的意思。</p><p>毕竟听到家庭的教育，她女儿是高贵的，因为她成绩班上第一，你们那些不学习别来打扰我女儿，也不知道是有多少钱多少权呢。</p><p>听到这里其实少年对这个女生很恶心了。后面稀里糊涂指了个人竟又指回她来。</p><p>屮，我为啥运气这么背。</p><p>我觉得追我的女生她的心理有问题，可能是单亲家庭的小孩没了父亲，心理确实需要补偿，可我不是她的父亲，没有必要为她代偿吧，我肯定没有这个义务的，</p><p>其实班里那帮女的头脑很简单的，我想，还不是羡慕长腿欧巴，看韩剧看多了？我不过好像发育的快些，暂时长得高些，可能让这种人有安全感了吧，软的不行，只有硬的了，“滚蛋。“心想：单亲家庭的小朋友，我可没必要给你废话啊。“滚!”我的耐心已经用尽。</p><h2 id="五、勿要迎合别人以至于留下话柄"><a href="#五、勿要迎合别人以至于留下话柄" class="headerlink" title="五、勿要迎合别人以至于留下话柄"></a>五、勿要迎合别人以至于留下话柄</h2><p>初中有个同桌小陈，整天只会小屌顶着桌板，口喊：”我的大波妹。“</p><p>小陈转过头说：”我觉得某某老师很漂亮，胸很大。“</p><p>少年心里有点诧异，觉得他的做法一点不得体。</p><p>艾力哈默，一听是个少民，是班上的扛把子。</p><p>我还记得他们蹲下去系鞋带偷看政治老师内裤。</p><p>少年家里就一直强迫他交朋友，说你以后要混好三教九流都要认识，到体制内也全靠情商，光有智商就是给人打工的。</p><p>父亲非要看我把朋友叫到家，不然他一回家就说：”你这么自闭。“</p><p>但是，三观不合强迫交的很多所谓的朋友转头就会离你而去了呢。</p><p>小王好像爸爸是有1000亩地，算是和少年一个院子的人。</p><p>小王说：”你最好别和那帮人玩了吧，那帮人不可靠。“</p><p>这句话果真后来应验了，</p><p>一次走在路上，艾力哈默对着小瑶说：&quot;少年又看a片，又手冲，他是想操你。&quot;</p><p>从此少年不但成了班上的渣男，而且成了班上的色狼。</p><p>少年每次想和父亲倾诉，父亲总是会说：”你胡思乱想什么？不和别人打球唱歌，一个人窝在房子里干什么。是不是你意淫？“</p><p>我觉得曾博来新疆这种环境怕不是被人打死吧。</p><h2 id="六、日系感"><a href="#六、日系感" class="headerlink" title="六、日系感"></a>六、日系感</h2><p>上大学时，少年一开始根本不想找对象，但是看别人都在找，考虑要不要试试呢，一次工程实践上见到一个女生有点日系美女的感觉，偷偷趁她不在翻了下她的试题册，问了一个学长指着那个人是谁。</p><p>学长说：“是一心啊，她有男朋友的，我喜欢她。”</p><p>少年说：“想认识一下嘛。”</p><p>学长拍了一下少年：“小子你不会是喜欢她吧，我也喜欢她的，要是你也喜欢咱俩就成...不过说实话咱俩基本都没戏。”</p><p>又是一个可望不可及的存在呢。</p><p>我还是躺倒床上看看日剧的美女吧。</p><p>日剧中的美女，印象最深的莫过于新垣结衣，逃避可耻就有用的森山美栗人设简直程序员最爱。</p><p>“赛高”</p><p>“一他打给马斯”（&quot;我开动了&quot;）新垣结衣这句话我现在还记得。</p><p>或是玩玩阿宅之乐galgame。</p><p>galgame中我印象最深刻的女孩，大抵是mo7的南云霞，也许这是第一次玩galgame的原因吧，玩的时候格外用心，披着一头黑色的长发，两颗深黑的眸子，楚楚动人，一开始觉得这个女人是病娇，后面发现是个很关心男主的人，而且有自己的生活方式，还能做一手好菜，实在是好女人，玩到结局，女主说了一句：“小女子不才，愿与你共度余生。” 心感觉像化了一样。</p><p>听到女主对男主说的话，就像对自己说的一样。</p><p>”大輔  ” 少年听到这句话就像被女主叫了一样。</p><p>”大輔  ”少年模仿起女主的样子，像个痴汉。</p><p>“你™的怎么在玩小日本的玩意。还是这种男男女女的，真恶心”一个来自同乡的室友说到。</p><p>我不做发言，任由他怎么说。</p><p>后面发现他已经不在我的好友列表了。</p><h2 id="七、表白墙上"><a href="#七、表白墙上" class="headerlink" title="七、表白墙上"></a>七、表白墙上</h2><p>给自己定下了几条规则：</p><pre><code>    1. 不找同专业的女生，更不会考虑同班的女生，    2. 不考虑成绩很优异的女生，尤其一个班里成绩第一第二的女生，成绩优秀的女生可能心气很高，白追    3. 父母离异者，不予考虑    4. 不会多照顾女生，最好女生多照顾我</code></pre><p>“如同购物时的讨价还价一样，男女间的交往也许是这样吧。”少年这样恶劣的想。</p><p>人类想要的往往不是真相，而是一种需求的满足</p><p>少年和室友打赌：“我若不是得了心病，是不会连个女朋友都没有的”</p><p>少年跑到表白墙和人乱加，一开始把初中的丑事给别人噘，有些女生听了几下就拉黑我了。</p><p>还有的聊了聊觉得我人不错的：“你家新疆太远了，我们不太合适呢”也许这是理由呢，这个理由不比我不喜欢你伤人多了吗？我想拉黑了她，还是忍了忍，等到她删了我后拉黑了她。</p><p>谁还说四川人就开放包容了，吴越人就排外？哪个地方都有排外的人，我只能这么想，对四川的包容想法已然改变，不过是政府的宣传。</p><p>（要说到吴越人排外的我当然也见过，</p><p>还是浙大的学生呢，</p><p>人家在网络上有暴论：</p><p>”北方人鞑子，</p><p>南方人才是传统的汉族，</p><p>西边人落后，</p><p>我们东部发达。“</p><p>那我新疆的岂不是又鞑子又落后？</p><p>难道衣冠南渡，能改变绝大多数人血统？</p><p>我看不一定吧。</p><p>这一刻开始，</p><p>我觉得自己没必要对北方游牧民族怀有敌意了，说不定自己沾点契丹血统呢？</p><p>谁知道呢。。。</p><p>起码自称吴越人的人不把我当自己人。</p><p>）</p><p>当然也有的有点同情我，说那种欺负人的人有点过分，追人追不上折腾别人骂人渣男也同样过了。</p><p>我忽然感觉自己也是有女生理解的呢，根本不是父亲说的，我把旧事给别人讲别人一定会不想听。</p><p>约出来一个女生，照片很好看，真人差很多，主要磨皮磨掉了很多班吧，而且脸也有变形，脸变形这就难忍了。眼睑上满是眼影的亮粉，还很多班，一点也不算好看吧，还修饰过度。嘴唇就是厚嘴唇，不是很多东亚人喜欢的类型。</p><p>那人说话很作气，而且不像很负责任的人上午，说好的见面拖到下午，谁知道是不是本来就有男朋友，但是，这种作女都觉得我被不公的对待了呢。感觉自己渐渐自信一点了呢。</p><p>她想叫我去她租的屋子，我轻声回绝了呢。</p><p>我可不想和她再有太多交集。</p><p>就当是聊聊天吧，还蛮愉快的呢，只是下次不会这样干了，毕竟我非大富大贵，钱包有限。</p><p>只是，考计网前不停聊天，还被健忘的辅导员老师中午临时打了电话，给同事把事怪罪到我身上，一肚子气，本来复习不充分，加上考试时心情不好，想都不想瞎蒙乱猜，确实考砸了呢。</p><p>后来去聊到一些妹子感觉也都形形色色，有男朋友还加60多个男生解闷的；说自己喜欢传统文化其实只是cosplay汉服的，我把她怼到删我；说自己穿jk的但是每次嗯嗯嗯回答，有气无力的，</p><h2 id="八、可真远呢"><a href="#八、可真远呢" class="headerlink" title="八、可真远呢"></a>八、可真远呢</h2><p>杨睿琪，也是在表白墙上认识的，我其实不想提这个女生的，但害怕以后忘记还是先写上吧，</p><p>约是约出来了，看着长相不算突出，身高还有167+了吧，脸部有一两个痘但不多，身材也多少有点肉，不是骨头架子，也不是太胖。皮肤保养的是很好，她没有注意朋友圈设置时间，我得以偷窥她的朋友圈，喜欢足球，喜欢德国的穆勒。还喜欢传统文化，但理解不深刻，中国是唯一延续至今的古文明本来就是政治术语，根本不是事实，就是最成功的文明也是希腊文明吧，阿拉伯人研习希腊文明成果，开创黄金时代，西欧人文艺复兴发掘希腊旧作，终成现在领先世界的局面（我觉得美国算欧洲的此生文明），得知她家大概是河北唐山的时，我想硬凑半个老乡套个近乎，确实，弄巧成拙了。</p><p>她说她高考600多分。</p><p>”你当时考了多少分啊？“</p><p>”500多吧“我不好意思的说到，要是说才510多的话也太糗了。</p><p>问到家乡的时候说”你的家乡也太远了。“</p><p>”新疆，真远呢。“听到这句话，我表面好像没什么，但不由得心头微微一颤，感觉极大可能性凉了。</p><p>突然看着自己的tshirt，父母挑的肥大款的，这下可能女生觉得我胖且邋遢了吧，人穿显瘦的衣服会显得精干的，</p><p>在网上遇见一个某电的妹子，之前好像随便聊过，我问她这种无聊的情感问题，把我的情况给他阐明问有没有希望，她居然回复了。</p><p>“你没机会了，你是不是傻啊，没必要把钱垫了啊。不然你约她的机会都没了，恋爱可是两方都有付出才能建立的啊，你个傻瓜。”</p><p>我被怼了反倒很高兴，因为这个女生至少能指出我的问题。</p><p>一个陌生人能帮陌生人指出问题，多温柔呢。</p><p>果不其然，自此再没机会叫人出来了，每次都是拖着，还带着个羞涩的表情，说不清是委婉拒绝还是想拖着，最讨厌留给人余地的女人了。后面发现人有男朋友了，问了下他男朋友哪时候认识的，问完就被她男朋友拉黑了，他是我大一死党的一个朋友，被他拉黑，感觉比我最后拉黑她难受的多。</p><h2 id="九、可望而不可即"><a href="#九、可望而不可即" class="headerlink" title="九、可望而不可即"></a>九、可望而不可即</h2><p>当我看到她留学去澳洲，还上得是不错的学校，昆士兰。</p><p>不过她的身材当时真的有点点妖媚性感呢，现在却是瘦的不行了呢.</p><p>随便问了她两句：</p><p>“申请上昆士兰了啊？”</p><p>“昂啊。”</p><p>“可以啊。”</p><p>“还好了”</p><p>“主要是有个好平台”</p><p>“澳洲八大大部分企业都能去吧”</p><p>“嗯哼”</p><p>一看到嗯哼就说明她在敷衍了，我便停止了言谈。</p><p>空间里看到她的男友，一个小白脸，大概和她差不多高吧，可能是江浙沪的有钱大户吧。</p><p>她之前的男友是很帅气”阳光“的吧，经常打篮球，很帅的，很高挑的，而且有点痞痞的感觉。</p><p>”人心啊，终究是敌不过钱呢。“我自以为是的这样想到。</p><p>可望而不可即的，不仅是人，而且是学校。</p><p>//也许是初中的事情让他失去了自信了吧，</p><p>高中时他连自己看书的勇气都没有了，“满脑子都怀疑自己是不是真色狼真渣男。”</p><p>老师看着我一脸期待，我却最后让他们很失望。</p><p>（</p><p>。。。待补充，有心情就写，没心情就删了。</p><p>。。高一</p><p>。。。高二</p><p>。。。。高三</p><p>）</p><p>这就是高中的感悟吧。</p><p>“哇！”一下子，少年痛哭起来。</p><p>##十、兄弟？</p><p>兄弟，是个意味深长的话语。</p><p>即使亲兄弟都会因为遗产纠纷而反目成仇，</p><p>更遑论表兄弟呢。</p><p>小贝是我的一个表哥。</p><p>少年忽然想起来他在自己约6岁拿吐了吐沫的水让我喝：“弟弟，这是仙水”</p><p>我的外公看到，很生气，”这是使坏吗？你怎么能让你弟弟喝你涂了吐沫的水。“</p><p>这是一幕</p><p>更丑陋的一幕是，</p><p>我中学问他男女关系的事，一开始他说：“人家肯定是喜欢你，你追就行了。”</p><p>现在才意识到，这个人不过本能的说好听话罢了，他根本不懂那个女生觉得我魅力不足又想吊着我的心理。</p><p>最丑陋的一幕是，</p><p>”凭什么你爸爸关心你，而我的爸爸呢，你这个傻子，不懂得珍惜的人。”</p><p>隔了一阵子，大家去了外公家，好像是我当时学不进习，妈妈给姨姨说要让表哥来开导下我，希望把我往好的方向引，姨姨和表哥说我的事，表哥说:&quot;少年真傻，谁说了要他追的，都是他自己的事，我没有任何关系。谁知道他怎么想。“又听见他说到另外一个表哥的学校：”肯定是拿钱砸出来的吧“</p><p>又听见意义</p><p>我当时并没有特别的恨他，现在回忆往昔，双眼却满是憎恶。</p><p>真是要拉黑那种人呢，不真诚的人，是大概率会两面三刀的。</p><p>我就是玩不起又能如何呢？</p><p>十、荒诞的现在与未知的未来</p><p>之前网上加了个女生，好像随便聊过天，她说我太高了，可以考虑下她室友。</p><p>谁知她室友身高不但很好，而且是本科能发ccf的人物，而且是某大城市土著，我心想你逗我呢，分明是在开玩笑，既然没那么高学力，也没有任何的事业，除非我长相鲜肉亚萨西到极致又情商极高才可能入人家法眼啊...我又不像高仓健又不想小鲜肉，什么时代的审美下我都是大众长相啊。</p><p>和她聊了下我过去，人家竟然听了，说小伙子，你有点呆啊（指我没情商）。</p><p>和她聊到考研的事，她说你们这种普通学校的考研名校挺难的，要不我给你个大公司内推？</p><p>我稀里糊涂的填了简历去面，挂了，发现自己其实并没有做好就业的准备。</p><p>一开始什么岗位都不知道，前端和后端的需求区别都不清晰。</p><p>麻了，又栽在女人手里了，还是太嫩了。</p><p>可惜上了贼船跳不下来了，只能硬着头皮上了。</p><p>屮</p><p>真是像galgame的选项浮现在眼前了。</p><p>而我因为荒唐的决定突然从考研的路线跳到了就业的路线呢。</p><p>末尾</p><p>月色不美</p><p>但就要消逝了</p><p>窗外蟋蟀的叫声</p><p>并不能消解我的疲倦，</p><p>回忆虽重，</p><p>却不是过去了，</p><p>过去一切，</p><p>已成历史，</p><p>如此记载，</p><p>不过是给年老是留下点回忆罢了，</p><p>现在要暂时忘却了</p><p>那就睡一觉吧，</p><p>明天也许是崭新的开始，</p><p>经历的事情太多，</p><p>来不急诉说完，</p><p>行动吧，</p><p>还有明天等待，</p><p>行动吧，</p><p>还有明天等待</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;可惜，月色不美呢&quot;&gt;&lt;a href=&quot;#可惜，月色不美呢&quot; class=&quot;headerlink&quot; title=&quot;可惜，月色不美呢&quot;&gt;&lt;/a&gt;可惜，月色不美呢&lt;/h1&gt;&lt;h2 id=&quot;序曲&quot;&gt;&lt;a href=&quot;#序曲&quot; class=&quot;headerlink&quot; titl</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://theme-next.js.org/1.%E4%B8%8D%E6%98%AF%E8%92%99%E5%8F%A4%E5%85%A5%E4%BE%B5%EF%BC%8C%E8%A5%BF%E6%96%B9%E6%9C%AA%E5%BF%85%E4%BC%9A%E5%8F%91%E5%B1%95%E5%87%BA%E7%A7%91%E5%AD%A6%EF%BC%8C%E5%8F%8D%E8%80%8C%E5%8F%AF%E8%83%BD%E6%98%AF%E9%98%BF%E6%8B%89%E4%BC%AF%E4%B8%96%E7%95%8C%E5%85%88%E5%87%BA/"/>
    <id>https://theme-next.js.org/1.%E4%B8%8D%E6%98%AF%E8%92%99%E5%8F%A4%E5%85%A5%E4%BE%B5%EF%BC%8C%E8%A5%BF%E6%96%B9%E6%9C%AA%E5%BF%85%E4%BC%9A%E5%8F%91%E5%B1%95%E5%87%BA%E7%A7%91%E5%AD%A6%EF%BC%8C%E5%8F%8D%E8%80%8C%E5%8F%AF%E8%83%BD%E6%98%AF%E9%98%BF%E6%8B%89%E4%BC%AF%E4%B8%96%E7%95%8C%E5%85%88%E5%87%BA/</id>
    <published>2021-08-24T12:43:09.417Z</published>
    <updated>2021-08-24T12:44:21.325Z</updated>
    
    <content type="html"><![CDATA[<p>1.不是蒙古入侵，西方未必会发展出科学，反而可能是阿拉伯世界先出</p><p>2.日本17世纪开始逐渐社会发展程度超过中国，和算中有些关于微积分的成果</p><p>同时期中国并没有发展出类似的成果</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;1.不是蒙古入侵，西方未必会发展出科学，反而可能是阿拉伯世界先出&lt;/p&gt;
&lt;p&gt;2.日本17世纪开始逐渐社会发展程度超过中国，和算中有些关于微积分的成果&lt;/p&gt;
&lt;p&gt;同时期中国并没有发展出类似的成果&lt;/p&gt;
</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://theme-next.js.org/1.%E4%B8%BA%E4%BB%80%E4%B9%88%E9%9C%80%E8%A6%81key/"/>
    <id>https://theme-next.js.org/1.%E4%B8%BA%E4%BB%80%E4%B9%88%E9%9C%80%E8%A6%81key/</id>
    <published>2021-08-03T08:41:33.536Z</published>
    <updated>2021-08-04T01:19:51.354Z</updated>
    
    <content type="html"><![CDATA[<p>1.为什么需要key</p><p>增加渲染效率</p><p>没key<li>的添加导致</p><p>提高渲染效率</p><p>React的key不要用index</p><p>不推荐用index</p><p>index对应数据重排会导致重新渲染</p><p>正常的列表数据index做key影响不大</p><p>index会导致重新渲染</p><p>用的多了会导致变慢</p><p>为什么setState是一个异步过程</p><p>内部一致性</p><p>state同步 props异步会导致很多问题</p><p>性能优化</p><p>批量处理的过程，</p><p>不断改方案</p><p>改成d方案</p><p>什么是Hooks？</p><p>functional conponent 没有state 没有生命周期</p><p>有了Hooks</p><p>functional component+hooks =class component</p><p>useState()</p><p>useReducer()</p><p>useEffect()</p><p>useContext()</p><p>代码质量-可复用性</p><p>mixin-&gt;Hoc-&gt;Render Props-&gt;Hooks</p><p>mixin方案出现源自一种oop直觉</p><p>Mixin的缺陷</p><p>隐式依赖</p><p>可能产生冲突</p><p>倾向于增加更多状态</p><p>计时器</p><p>细粒度代码复用不应该和组件复用捆绑</p><p><img src="C:\Users\zr199\AppData\Roaming\Typora\typora-user-images\image-20210803161349337.png" alt="image-20210803161349337" loading="lazy"></p><p><img src="C:\Users\zr199\AppData\Roaming\Typora\typora-user-images\image-20210803161408482.png" alt="image-20210803161408482" loading="lazy"><img src="C:\Users\zr199\AppData\Roaming\Typora\typora-user-images\image-20210803161550370.png" alt="image-20210803161550370" loading="lazy"></p><p><img src="C:\Users\zr199\AppData\Roaming\Typora\typora-user-images\image-20210803161644695.png" alt="image-20210803161644695" loading="lazy"></p><p><img src="C:\Users\zr199\AppData\Roaming\Typora\typora-user-images\image-20210803163256637.png" alt="image-20210803163256637" loading="lazy"></p><p><img src="C:\Users\zr199\AppData\Roaming\Typora\typora-user-images\image-20210803163351175.png" alt="image-20210803163351175" loading="lazy"></p><p><img src="C:\Users\zr199\AppData\Roaming\Typora\typora-user-images\image-20210803163523773.png" alt="image-20210803163523773" loading="lazy"></p><p>问个code答不上来，面试官会觉得水</p><p><img src="C:\Users\zr199\AppData\Roaming\Typora\typora-user-images\image-20210803163720413.png" alt="image-20210803163720413" loading="lazy"></p><p>建立可复用的tcp连接</p><p>，这个主要为了兼容老版本的tc<img src="C:\Users\zr199\AppData\Roaming\Typora\typora-user-images\image-20210803163924624.png" alt="image-20210803163924624" loading="lazy"></p><p><img src="C:\Users\zr199\AppData\Roaming\Typora\typora-user-images\image-20210803164443837.png" alt="image-20210803164443837" loading="lazy"></p><p><img src="C:\Users\zr199\AppData\Roaming\Typora\typora-user-images\image-20210803164122390.png" alt="image-20210803164122390" loading="lazy"></p><p>Get和Post的区别</p><p>Option put</p><p>通常一起比较</p><p>get去拿</p><p>一般服务器获取资源数据</p><p>post一般向服务器提交资源</p><p>get请求能做的事情post也能做</p><p>get方法安全且幂等的</p><p>post新增</p><p>提交多次有多个资源不是幂等的</p><p>get一些查询条件</p><p>服务器不规范也是能处理</p><p>get可以被cache的</p><p>post很难被缓存</p><p>HTTp1.1优缺点</p><ol><li><p>简单灵活 </p></li><li><p>跨平台 </p></li><li><p>无状态</p></li></ol><p>服务器不需要额外资源记录状态信息</p><p>其实坏处是没有记忆能力，关联性的操作很麻烦</p><p>cookie保证不用每一步验证</p><p>明文传输</p><ul><li>可以方便的阅读</li><li>信息裸奔</li><li>可能被篡改</li></ul><p>安全性</p><p>https多了一层</p><p>tls层secure层</p><p><img src="C:\Users\zr199\AppData\Roaming\Typora\typora-user-images\image-20210803214233343.png" alt="image-20210803214233343" loading="lazy"></p><p>冒充风险</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;1.为什么需要key&lt;/p&gt;
&lt;p&gt;增加渲染效率&lt;/p&gt;
&lt;p&gt;没key&lt;li&gt;的添加导致&lt;/p&gt;
&lt;p&gt;提高渲染效率&lt;/p&gt;
&lt;p&gt;React的key不要用index&lt;/p&gt;
&lt;p&gt;不推荐用index&lt;/p&gt;
&lt;p&gt;index对应数据重排会导致重新渲染&lt;/p&gt;
&lt;p&gt;正常</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Number和String方法</title>
    <link href="https://theme-next.js.org/Number%E5%92%8CString%E6%96%B9%E6%B3%95/"/>
    <id>https://theme-next.js.org/Number%E5%92%8CString%E6%96%B9%E6%B3%95/</id>
    <published>2021-07-30T16:31:17.000Z</published>
    <updated>2021-07-30T09:02:00.940Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Number和String方法-背后的转换原则"><a href="#Number和String方法-背后的转换原则" class="headerlink" title="Number和String方法--背后的转换原则"></a>Number和String方法--背后的转换原则</h1><h2 id="Number方法"><a href="#Number方法" class="headerlink" title="Number方法"></a>Number方法</h2><ol><li><p>先调用对象自身的valueOf方法，若返回原始类型的值，则使用Number方法，放弃后续的步骤</p></li><li><p>若valueOf方法返回对象，则改用ToString方法，若返回原始类型的值，则使用Number方法，不再进行后续步骤</p></li><li><p>如果toString方法返回的是对象，就报错</p></li></ol><h2 id="String方法"><a href="#String方法" class="headerlink" title="String方法"></a>String方法</h2><ol><li><p>先调用对象的toString方法，若返回原始类型的值，则使用String方法，不再进行后续步骤</p></li><li><p>如果toString方法返回对象，使用valueOf方法，若返回原始类型的值，则使用String方法，不再进行后续步骤</p></li><li><p>如果valueOf方法返回对象，则报错</p></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Number和String方法-背后的转换原则&quot;&gt;&lt;a href=&quot;#Number和String方法-背后的转换原则&quot; class=&quot;headerlink&quot; title=&quot;Number和String方法--背后的转换原则&quot;&gt;&lt;/a&gt;Number和String方法-</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>fix</title>
    <link href="https://theme-next.js.org/fix/"/>
    <id>https://theme-next.js.org/fix/</id>
    <published>2021-07-22T13:46:52.000Z</published>
    <updated>2021-07-22T05:46:52.169Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>html00</title>
    <link href="https://theme-next.js.org/html00/"/>
    <id>https://theme-next.js.org/html00/</id>
    <published>2021-07-20T12:46:07.000Z</published>
    <updated>2021-07-20T09:43:32.481Z</updated>
    
    <content type="html"><![CDATA[<h1 id="屮"><a href="#屮" class="headerlink" title="屮"></a>屮</h1><p>html不管样式<br>css管样式<br>不能把视频当电视剧看多查文档<br>navigation-<nav><br>alternative-alt<br>不要一直用<div><br><span> <DIV>没有意义的标签<br>中文英文关系</p><h2 id="和区别"><a href="#和区别" class="headerlink" title="和区别"></a><button>和<input type="button">区别</h2><p>button不是一个空元素<br><input type="button">不能有自己元素 </p><p>空元素<meta> <link> <hr><br><col><colgroup></p><p>html5不推荐input写成自闭合的</p><div>就是写到<head></head>里面也会被浏览器纠错放到<body></body>里base title meta link script noscript可以出现在head元素内<p><noscript> 如果用户浏览器不支持script 则展示noscript中的内容</p><p>   iframe可以拥有一个name，a标签的target可以通过name指向这个iframe</p><p>现代前端开发中iframe很少用</p><p>iframe用于在当前页面里嵌入一个页面</p><meta charset="utf-8">* html5更新后<meta http-equip="content-type" content="text\html" charset ="utf-8"><ul><li><p>http等价物</p></li><li><p>body 默认margin:8px</p></li><li><p>span，image默认display inline</p></li><li><p>div，ul，h1默认display block </p></li></ul><p>img可替换元素=》替换为图片，宽高待图片下载后产生</p><p>img input video</p><ul><li>外观渲染独立于css</li></ul><p>css优先级比属性要高，属性不是内联样式</p><p>html全称?</p><ul><li>Hyper Text Makeup Language</li></ul><p>Who is making  the Web standards?</p><ul><li>The World Wide Web Consortium(w3c)</li></ul><p>What is the correct Html element for inserting a line break</p><br><p>html早期自带css一些属性</p><p>李爵士发明html时候没有css</p><p>bgcolor背景色</p><p>What is the correct html for adding a background color?</p><body style="background-color:yellow;"><p>Choose the correct Html element to define important text?</p><strong><p>Choose the correct html element to define emphasizzed text</p><em><p>em语气重</p><p>strong地位重</p><p>How can you open a link in anew tab/browser window ?</p><a href="url" target="_blank"><p>Which of these elements are all <table> elements?(d)</p><p>a.<thead>，<body>,<tr></p><p>b.<table>,<tr>,<tt></p><p>c.<table>,<head>,<tfoot></p><p>d.<table><tr><td></p><p>inline 内联元素<br>Inline elements are normally displayed without starting a new line</p><p>How can you make a numbered list?<br>ans:<ol></p><p>How can you make a bulleted list?</p><ul><ol><list><dl>ans:<ul>What is the correct Html for making a checkbox?(a)a.<input type="checkbox">b.<input type="check">c.<checkbox>d.<check><p><img src="C:\Users\zr199\AppData\Roaming\Typora\typora-user-images\image-20210720153829499.png" alt="image-20210720153829499" loading="lazy"></p><p><img src="C:\Users\zr199\AppData\Roaming\Typora\typora-user-images\image-20210720153856363.png" alt="image-20210720153856363" loading="lazy"></p><p>What is the correct html for making a text area?</p><textarea>What is the correct html for inserting a background image<body style ="background-image:url(background.jpg)"In html you can embed svg elements directly into an html page(true)contenteditable="true"The html global attribute "contenteditable" is used to Specify whether the content of an element should be eaditable or notIn html onblur and onfocus is 事件event attributessvg是xml格式的<canvas>元素用来draw graphicsIn html,which attribute is used to specify that an input field must be filled out?ans:requiredwhich input type defines a slider control?ans:rangewhich html element is used to display a scalar measurement within a range<meter>非·<measure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;屮&quot;&gt;&lt;a href=&quot;#屮&quot; class=&quot;headerlink&quot; title=&quot;屮&quot;&gt;&lt;/a&gt;屮&lt;/h1&gt;&lt;p&gt;html不管样式&lt;br&gt;css管样式&lt;br&gt;不能把视频当电视剧看多查文档&lt;br&gt;navigation-&lt;nav&gt;&lt;br&gt;alternative-al</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>凝死，报恩</title>
    <link href="https://theme-next.js.org/%E5%87%9D%E6%AD%BB%EF%BC%8C%E6%8A%A5%E6%81%A9/"/>
    <id>https://theme-next.js.org/%E5%87%9D%E6%AD%BB%EF%BC%8C%E6%8A%A5%E6%81%A9/</id>
    <published>2021-07-19T13:37:38.000Z</published>
    <updated>2021-07-19T05:39:08.268Z</updated>
    
    <content type="html"><![CDATA[<p>望着祖母离去的眼，凝视祖母的死亡，我竟不带一丝一毫的同情。</p><p>也许是出于对她行为的嫉妒，祖母并不心疼我，虽然我是正孙可她却最喜欢外孙，我甚至觉得，她生出我的父亲，是一个错误。</p><p>说到我的高中时期。</p><p>父亲一直认定我是追女生j开始不好好学习的，对我的态度也日趋恶劣。</p><p>其实大概是我被人孤立排挤了。</p><p>父亲是极矛盾的人，本身自己就是极平凡的人，我中学时却要我去学习乔布斯呢，我当时没什么社会经验，学乔布斯问女生是不是处，学乔布斯骂人无视讨厌的人，骂了我讨厌的但喜欢我的姑娘，将她的事迹给别人讲，然后那人竟传的整个班上我是屌丝意淫。全班同学以我为逗乐，拍屌拔裤子什么的就不说了，被全班所孤立，极为痛苦，我当时的精神都不愿意再拿来说了。</p><p>父亲说：”谁欺负你了给我说啊。“可当我被全班孤立之时，他只会说我不会打架，不会相处等等。并不愿意听我细细去讲，一度还以为我怀了春”</p><p>从那时起，我对父亲变得愤懑起来，他渐渐对我的不满也与日俱增。</p><p>听到了沉重的步伐声，我急忙藏起我的语录本。父亲要是看到了我写的那些“神神叨叨”的话，定会撕了我的小本，扇我巴掌，吼叫到：“你他妈的有没有出息，人家xx家的孩子都能学到两三点，你为什么没能学到那么晚？写的是些什么垃圾玩意儿？”</p><p>可是掏出练习册，册子是空的。</p><p>’麻烦大了。。。‘</p><p>父亲翻了下我的练习册，立马删了我一巴掌。</p><p>我又气又愤：“还让不让人过了？”</p><p>“你自己不锻炼，没有体力，我听你们班主任说人家xx的孩子为了高考都拼了，一天睡四个小时。我是为了你好，现在不努力，以后你哭去吧？”父亲丝毫对我没有同情，只是把心中的不满引爆到我的身上。</p><p>那会儿确实是困了，想睡觉。可父亲揪起我的头发，把我往墙边撞去。我无力反抗，像个被警察殴打的犯人一样狼狈，好像是犯下了什么罪行，接受着“正义”的拷打。</p><p>到省城上学，是我的希望，但是父亲不让我一人去，“不放心你！”，原话是说得好听，托关系到了省城，他找的人因为站错队丢了职务，他自然没有被安排职位，心情不好，没有人去开涮，原来这个垃圾桶是我妈妈，现在呢我就成了他的垃圾桶，他的发泄口。</p><p>“哎。。。”我真是倒霉，白白受到这种对待，还不能反抗。</p><p> “你看看人家怎么学习的，你不学习到凌晨怎么能行？高中拼一拼就为了你的将来，现在不拼更待何时？”这种话从家里到学校，一直在提，一直在说，教员和家长的话里，好像谁睡得少就是一种荣耀似的，人不睡觉怎么得行？</p><p>   但是，我，毕竟太过懦弱，总要在人前装出一种和善的样子，只能在背后哀叹自己的无能，慢慢让自己也接受了这种成功学似的话术。因为这种生活方式太过疲惫，时不时一个人自己与自己相慰籍，莫名的泪从眼中流出，经过脸颊流下，但又不好意思让人知道我的软弱。</p><p>   成功人士可能真睡四个小时吗？</p><p>   就算有，也是极为偶然有一天睡得少些吧。</p><p>   在“暴君”的荒谬统治下，长达数月四五小时的睡眠让我的体型不在均匀，有点弯腰驼背的样子，眼前是重重的眼袋。。。皮肤也不在光鲜，人也越来越毛躁，越来越听不进去课了，家里晚上不让我睡，我就白天在课堂睡。老师要就我起来，我就站着睡，没有睡眠的我像一具活尸，记忆力不断的衰退。班主任和家长天天喂我成功学鸡汤。</p><p>父亲只会说，是你不够努力。</p><p>老师也是这么说。</p><p>我不但憎恶起了父亲，也同样憎恶起了老师，渐渐的与他们对抗。</p><p>”鳅老师指着我眼睛，说我如果是他的孩子要狠狠扇我。“这是我对年级主任说的话，作为对她的恩情的奉还。</p><p>年纪主任将她批评了一番，鳅老师之后看我双眼带着憎恶，没错，这就是当时的我想要的，我并不想让别人喜欢我，只想自绝于社会，也许有人看来我是惯坏的怪胎，可我的伤痛他们想必也没有耐心倾听。</p><p>想必有一天，当我的父亲离世之日，我也许会装出哭腔，但内心毫无怜悯吧，毕竟我的领主的领主不是我的领主，我的家长的家长不是我的家长。</p><p>我仍旧要在家长的面前装弱，好像自己是个什么都不懂的人，待他的支配罢，</p><p>日夜的折磨下，我有那么一两刻想过自绝于人世，或是将父亲这只肥猪用剪刀捅向心窝。矛盾激化至此，也是难收回了呢。</p><p>我觉得还是要积聚力量吧，毕竟15-16岁的孩子和正当壮年的人打架还是要吃亏的吧。</p><p>所幸没有做出那样的决定吧，这是我对死亡的凝视。</p><p>我本来是想和父亲断绝关系的，可是呢，疫情在家的日子里却又和他们走得更近了，我的心也是软呢，虽然他喝酒后暴躁，虽然他希望去控制我，但我也有好处-可以利用他的控制欲帮我做一些事情：“比如让他掏钱。寄生于人虽然没有任何地位，但是总好过饿死，也许我本不想出生，可为何他们生了我呢。</p><p>毕竟啊这些中老年男性，就是待死之人，而我父亲这种呢，外面混的不顺心时，特别强调自己在家中的权威性，因为养老要靠子女吧，所以要建立权威性和让孩子感恩。</p><p>我的内心只有感恩，这感恩呢，是五味杂陈的感恩。</p><p>以后呢，也许是父亲凝视我的死亡呢，也许是我凝视父亲的死亡呢，变数太多，不好说清。</p><p>我当初是希望他们白发人快点送我黑发人走，可现在感觉对生有了一点迷恋，毕竟我还希望能留给后人一些东西，无论是代码还是文章，或是社会事务的贡献，虽然自己的心灵受了痛苦，但我好像对人类弥留了些爱恋，肯定是要报恩的。</p><p>写于2021.7.18</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;望着祖母离去的眼，凝视祖母的死亡，我竟不带一丝一毫的同情。&lt;/p&gt;
&lt;p&gt;也许是出于对她行为的嫉妒，祖母并不心疼我，虽然我是正孙可她却最喜欢外孙，我甚至觉得，她生出我的父亲，是一个错误。&lt;/p&gt;
&lt;p&gt;说到我的高中时期。&lt;/p&gt;
&lt;p&gt;父亲一直认定我是追女生j开始不好好学习</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>jsexample01</title>
    <link href="https://theme-next.js.org/jsexample01/"/>
    <id>https://theme-next.js.org/jsexample01/</id>
    <published>2021-07-16T16:02:55.000Z</published>
    <updated>2021-07-16T08:24:54.647Z</updated>
    
    <content type="html"><![CDATA[<ol><li>函数名仅仅是指向函数的指针，因此函数名与包含对象指针的其他变量没有什么不同。换句话<br>说，一个函数可能会有多个名字，如下面的例子所示。</li></ol><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">num1, num2</span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> num1 + num2;</span><br><span class="line">&#125;</span><br><span class="line">alert(sum(<span class="number">10</span>,<span class="number">10</span>)); <span class="comment">//20</span></span><br><span class="line"><span class="keyword">var</span> anotherSum = sum;</span><br><span class="line">alert(anotherSum(<span class="number">10</span>,<span class="number">10</span>)); <span class="comment">//20</span></span><br><span class="line">sum = <span class="literal">null</span>;</span><br><span class="line">alert(anotherSum(<span class="number">10</span>,<span class="number">10</span>)); <span class="comment">//20</span></span><br></pre></td></tr></table></figure><p>以上代码首先定义了一个名为 sum() 的函数，用于求两个值的和。然后，又声明了变量 anotherSum ，<br>并将其设置为与 sum 相等（将 sum 的值赋给 anotherSum ）。注意，使用不带圆括号的函数名是访问函数指针，而非调用函数。此时， anotherSum 和 sum 就都指向了同一个函数，因此 anotherSum() 也<br>可以被调用并返回结果。即使将 sum 设置为 null ，让它与函数“断绝关系”，但仍然可以正常调用<br>anotherSum() </p><ol start="2"><li>解析器在向执行环境中加载数据时，对函数声明和函数表达式并非一视同仁。解析器会率先读取函数声明，并使其在执行任何代码之前可用（可以访问）；至于函数表达式，则必须等到解析器执行到它所在的代码行，才会真正被解释执行。请看下面的例子。</li></ol><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">alert(sum(<span class="number">10</span>,<span class="number">10</span>));</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">num1, num2</span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> num1 + num2;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//FunctionDeclarationExample01.htm</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>以上代码完全可以正常运行。因为在代码开始执行之前，解析器就已经通过一个名为函数声明提升<br>（function declaration hoisting）的过程，读取并将函数声明添加到执行环境中。对代码求值时，JavaScript引擎在第一遍会声明函数并将它们放到源代码树的顶部。所以，即使声明函数的代码在调用它的代码后面，JavaScript 引擎也能把函数声明提升到顶部。如果像下面例子所示的，把上面的函数声明改为等价的函数表达式，就会在执行期间导致错误</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">alert(sum(<span class="number">10</span>,<span class="number">10</span>));</span><br><span class="line"><span class="keyword">var</span> sum = <span class="function"><span class="keyword">function</span>(<span class="params">num1, num2</span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> num1 + num2;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>以上代码之所以会在运行期间产生错误，原因在于函数位于一个初始化语句中，而不是一个函数声<br>明。换句话说，在执行到函数所在的语句之前，变量 sum 中不会保存有对函数的引用；而且，由于第一<br>行代码就会导致“unexpected identifier”（意外标识符）错误，实际上也不会执行到下一行。<br>除了什么时候可以通过变量访问函数这一点区别之外，函数声明与函数表达式的语法其实是等价的。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;ol&gt;
&lt;li&gt;函数名仅仅是指向函数的指针，因此函数名与包含对象指针的其他变量没有什么不同。换句话&lt;br&gt;说，一个函数可能会有多个名字，如下面的例子所示。&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;t</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>jsexample00-date</title>
    <link href="https://theme-next.js.org/jsexample/"/>
    <id>https://theme-next.js.org/jsexample/</id>
    <published>2021-07-16T15:44:05.000Z</published>
    <updated>2021-07-16T08:02:26.208Z</updated>
    
    <content type="html"><![CDATA[<p>// GMT 时间 2000 年 1 月 1 日午夜零时</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> y2k = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="built_in">Date</span>.UTC(<span class="number">2000</span>, <span class="number">0</span>));</span><br></pre></td></tr></table></figure><p>// GMT 时间 2005 年 5 月 5 日下午 5:55:55</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> allFives = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="built_in">Date</span>.UTC(<span class="number">2005</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">17</span>, <span class="number">55</span>, <span class="number">55</span>));</span><br></pre></td></tr></table></figure><p>​                                                                                                        <code>DateTypeUTCExample01.htm</code><br>这个例子创建了两个日期对象。第一个对象表示 GMT 时间 2000 年 1 月 1 日午夜零时，传入的值一<br>个是表示年份的 2000，一个是表示月份的 0（即一月份）。因为其他参数是自动填充的（即月中的天数为 1，其他所有参数均为 0），所以结果就是该月第一天的午夜零时。第二个对象表示 GMT 时间 2005年 5 月 5 日下午 5:55:55，即使日期和时间中只包含 5，也需要传入不一样的参数：月份必须是 4（因为月份是基于 0 的）、小时必须设置为 17（因为小时以 0 到 23 表示），剩下的参数就很直观了。</p><p>因此，如果第一个参数是数值， Date 构造函数就会假设该值是日期中的年份，而第二个参数是月份，<br>以此类推。据此，可以将前面的例子重写如下。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 本地时间 2000 年 1 月 1 日午夜零时</span></span><br><span class="line"><span class="keyword">var</span> y2k = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="number">2000</span>, <span class="number">0</span>);</span><br><span class="line"><span class="comment">// 本地时间 2005 年 5 月 5 日下午 5:55:55</span></span><br><span class="line"><span class="keyword">var</span> allFives = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="number">2005</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">17</span>, <span class="number">55</span>, <span class="number">55</span>);</span><br><span class="line"><span class="comment">// DateTypeConstructorExample01.htm</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>以上代码创建了与前面例子中相同的两个日期对象，只不过这次的日期都是基于系统设置的本地时<br>区创建的</p><p><img src="C:\Users\zr199\AppData\Roaming\Typora\typora-user-images\image-20210716155703497.png" alt="image-20210716155703497" loading="lazy"></p><p><img src="C:\Users\zr199\AppData\Roaming\Typora\typora-user-images\image-20210716155745891.png" alt="image-20210716155745891" loading="lazy"></p><p><img src="C:\Users\zr199\AppData\Roaming\Typora\typora-user-images\image-20210716155757315.png" alt="image-20210716155757315" loading="lazy"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;// GMT 时间 2000 年 1 月 1 日午夜零时&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;ke</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>js00</title>
    <link href="https://theme-next.js.org/js00/"/>
    <id>https://theme-next.js.org/js00/</id>
    <published>2021-07-16T15:04:30.000Z</published>
    <updated>2021-07-16T07:06:16.032Z</updated>
    
    <content type="html"><![CDATA[<p>ECMAScript 有5 种简单数据类型（也称为基本数据类型）：</p><ul><li><p>5 种简单数据类型：Null 、Boolean 、 Number、String、Undefined  。</p></li><li><p>还有1种复杂数据类型—— Object。</p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;ECMAScript 有5 种简单数据类型（也称为基本数据类型）：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;5 种简单数据类型：Null 、Boolean 、 Number、String、Undefined  。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;还有1种复杂数据类型—— Obje</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>js要点-defer_async</title>
    <link href="https://theme-next.js.org/defer-async/"/>
    <id>https://theme-next.js.org/defer-async/</id>
    <published>2021-07-16T14:54:22.000Z</published>
    <updated>2021-07-16T06:56:13.962Z</updated>
    
    <content type="html"><![CDATA[<ul><li><p>使用 defer 属性可以让脚本在文档完全呈现之后再执行。延迟脚本总是按照指定它们的顺序执行。</p></li><li><p>使用 async 属性可以表示当前脚本不必等待其他脚本，也不必阻塞文档呈现。不能保证异步脚<br>本按照它们在页面中出现的顺序执行。</p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;ul&gt;
&lt;li&gt;&lt;p&gt;使用 defer 属性可以让脚本在文档完全呈现之后再执行。延迟脚本总是按照指定它们的顺序执行。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;使用 async 属性可以表示当前脚本不必等待其他脚本，也不必阻塞文档呈现。不能保证异步脚&lt;br&gt;本按照它们在页面中出现的顺序</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>学一行爱一行·我看大可不必</title>
    <link href="https://theme-next.js.org/%E5%AD%A6%E4%B8%80%E8%A1%8C%E7%88%B1%E4%B8%80%E8%A1%8C%C2%B7%E6%88%91%E7%9C%8B%E5%A4%A7%E5%8F%AF%E4%B8%8D%E5%BF%85/"/>
    <id>https://theme-next.js.org/%E5%AD%A6%E4%B8%80%E8%A1%8C%E7%88%B1%E4%B8%80%E8%A1%8C%C2%B7%E6%88%91%E7%9C%8B%E5%A4%A7%E5%8F%AF%E4%B8%8D%E5%BF%85/</id>
    <published>2021-07-16T14:38:42.000Z</published>
    <updated>2021-07-16T06:47:55.751Z</updated>
    
    <content type="html"><![CDATA[<h2 id="经常有人说，学一行爱一行，要找到心之所爱"><a href="#经常有人说，学一行爱一行，要找到心之所爱" class="headerlink" title="经常有人说，学一行爱一行，要找到心之所爱"></a>经常有人说，学一行爱一行，要找到心之所爱</h2><p>可我却要质疑，如果非要等到你对某样事物有兴趣了才去做，会不会晚了些呢，社会竞争激烈，会不会在犹豫间，就失去了机会呢。人生，怎么会是仅仅去喜欢就够了的呢，就像你爱一个女孩死心踏地去追，还会不会落一场空呢；如果佛系一些，女孩又会白白送来吗；建议你还是先花费些精力去做吧，就像我的某朋友，撒大网才能钓大鱼，韭菜不要有过多的感受，现在开始结网，以后说不定收获累累呢。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;经常有人说，学一行爱一行，要找到心之所爱&quot;&gt;&lt;a href=&quot;#经常有人说，学一行爱一行，要找到心之所爱&quot; class=&quot;headerlink&quot; title=&quot;经常有人说，学一行爱一行，要找到心之所爱&quot;&gt;&lt;/a&gt;经常有人说，学一行爱一行，要找到心之所爱&lt;/h2&gt;&lt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>java核心04-类转型</title>
    <link href="https://theme-next.js.org/%E7%B1%BB%E8%BD%AC%E5%9E%8B/"/>
    <id>https://theme-next.js.org/%E7%B1%BB%E8%BD%AC%E5%9E%8B/</id>
    <published>2021-06-01T09:45:34.000Z</published>
    <updated>2021-07-15T13:40:23.014Z</updated>
    
    <content type="html"><![CDATA[<h1 id="类转型"><a href="#类转型" class="headerlink" title="类转型"></a>类转型</h1><h2 id="类转型1"><a href="#类转型1" class="headerlink" title="类转型1"></a>类转型1</h2><ul><li><p>变量支持相互转化，比如int a=(int)3.5;</p></li><li><p>变量可以相互转型，但是只限制于有继承关系的类。</p><ul><li>子类可以转换为父类，而父类不可以转换为子类</li><li>子类可以继承父类所有的财产，子类可以变成父类，从大变小，即向上转型</li><li>而父类直接变成子类（从小变大，即向下转型）则不允许</li></ul></li><li><p>父类转为子类有一种情况例外</p><pre><code>* 就是这个父类本身就是从子类转化的</code></pre></li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Man</span> <span class="keyword">extends</span> <span class="title">Human</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;I can eat more&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ploygh</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String [] args)</span></span>&#123;</span><br><span class="line">Man obj1=<span class="keyword">new</span> Man();</span><br><span class="line">        obj1.eat();</span><br><span class="line">        Human obj2=(Human) obj2;</span><br><span class="line">        obj2.eat();</span><br><span class="line">        Man obj3=(Man) obj2;</span><br><span class="line">        obj3.eat();</span><br><span class="line">        <span class="comment">//obj1==obj2;//true</span></span><br><span class="line">        <span class="comment">//obj2==obj3;//true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>多态的作用</p><ul><li>以统一的接口来操纵某一类中不同的对象的动态行为</li><li>对象之间的解耦</li></ul><h2 id="契约设计"><a href="#契约设计" class="headerlink" title="契约设计"></a>契约设计</h2><p><img src="C:\Users\zr199\AppData\Roaming\Typora\typora-user-images\image-20210501231741365.png" alt="image-20210501231741365" loading="lazy"></p><p>契约：规定规范了对象应该包含的行为方法</p><p>接口定义了方法的名称参数和返回值</p><p>基于接口，利用转型和多态，不影响真正方法的调用，成功地将调用类和被调用类解耦</p><p><img src="C:\Users\zr199\AppData\Roaming\Typora\typora-user-images\image-20210501230936328.png" alt="image-20210501230936328" loading="lazy"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>java支持子类转父类，但不支持父类转子类，除非父类对象最早就是子类转型父类而来</p><p>多态：子类转型为父类后，调用普通方法，依旧是子类本身的方法</p><p>契约设计：类不会直接调用另外一个类，而是采用接口形式，外部可以空投这个接口下的任意子类对象</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;类转型&quot;&gt;&lt;a href=&quot;#类转型&quot; class=&quot;headerlink&quot; title=&quot;类转型&quot;&gt;&lt;/a&gt;类转型&lt;/h1&gt;&lt;h2 id=&quot;类转型1&quot;&gt;&lt;a href=&quot;#类转型1&quot; class=&quot;headerlink&quot; title=&quot;类转型1&quot;&gt;&lt;/a&gt;类转型</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>java核心02-继承</title>
    <link href="https://theme-next.js.org/%E7%BB%A7%E6%89%BF/"/>
    <id>https://theme-next.js.org/%E7%BB%A7%E6%89%BF/</id>
    <published>2021-05-08T15:12:26.000Z</published>
    <updated>2021-07-15T13:42:06.416Z</updated>
    
    <content type="html"><![CDATA[<h1 id="6-1-1继承"><a href="#6-1-1继承" class="headerlink" title="6.1.1继承"></a>6.1.1继承</h1><p>先看一个例子</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">father</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">f1</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;hi&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Son</span> <span class="keyword">extends</span> <span class="title">Father</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] a)</span></span>&#123;</span><br><span class="line">        Son s=<span class="keyword">new</span> Son();</span><br><span class="line">        S.f1();</span><br><span class="line">        <span class="comment">//Son中没有f1方法的定义，根据父类继承的</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>面向过程编程语言没有继承，导致出现很多类型重复定义</p></li><li><p>物以类聚，世间万物皆对象，对象也可以划分为若干类别</p></li><li><p>类别内的对象属性和方法都有一定的共同点</p></li><li><p>将共同点提取出来，形成父类（或者叫基类，超类）</p><p>Parent class/Base class/Super class</p></li><li><p>而其他类则自动为子类派生类</p><p>Child class/Derived class</p></li></ul><p>从很多个对象中提取出共性，形成父类，其他类继承父类成为子类，也具有这些共性</p><ul><li><p>Man extends human 表示Man继承于humna</p></li><li><p>Human是父类，Man是子类</p></li><li><p>子类继承父类中所有的属性和方法（但不能直接访问private成员</p></li><li><p>根据信息隐藏原则：子类会继承父类中所有的方法。可以直接使用。</p></li><li><p>子类也会继承父类的父类的所有属性和方法（但不嫩更直接访问private成员)</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Derived</span> <span class="keyword">extends</span> <span class="title">Base</span></span>&#123;</span><br><span class="line">    <span class="comment">//private int num=20;</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Derived foo =<span class="keyword">new</span> Derived();</span><br><span class="line">        System.out.println(foo.getNUm());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Base</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> num=<span class="number">10</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getNum</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.num;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>​    输出结果为</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">10</span><br></pre></td></tr></table></figure><p>//子类可以通过调用父类的方法来访问父类的私有的成员属性</p><h2 id="方法优先级"><a href="#方法优先级" class="headerlink" title="方法优先级"></a>方法优先级</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Derived</span> <span class="keyword">extends</span> <span class="title">Base</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> num=<span class="number">20</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getNum</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.num;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Derived foo =<span class="keyword">new</span> Derived();</span><br><span class="line">        System.out.println(foo.getNUm());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Base</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> num=<span class="number">10</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getNum</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.num;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果为</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">20</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这说明了在同样方法名和参数情况下，本类的方法优先级会比父类的方法高</p><h2 id="继承（6）"><a href="#继承（6）" class="headerlink" title="继承（6）"></a>继承（6）</h2><ul><li>单类继承原则：每个类都只能继承一个类</li><li>如果不写extends，java类默认继承java.lang.Object类</li><li>class Human extends java.lang.Object</li><li>java所有类从java.lang.Object开始，构建出一个类型继承树</li><li>Object类里面默认有clone，equals，finalize，getClass，hashCode，toString等方法</li><li>若一个方法在当前类中没有定义，那这个方法就来自它的父类</li></ul><h2 id="继承和构造函数"><a href="#继承和构造函数" class="headerlink" title="继承和构造函数"></a>继承和构造函数</h2><ul><li><p>每个java类都必须有构造函数</p></li><li><p>如果没有显式定义构造函数，java编译器自动产生一个空的无形参构造函数</p></li><li><p>每个子类的构造函数的第一句话，都默认调用父类的无参数构造函数super（）,除非子类的构造函数第一句话是super，而且super语句必须放在第一条，不会出现连续两条super语句</p></li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li><p>子类继承父类所有的东西（但不能直接访问private成员）</p><ul><li><p>java所有类都继承自java.lang.Object类</p></li><li><p>java所有的类都是单根继承的</p></li><li><p>子类构造函数默认第一句话都会区调用父类的构造函数</p></li></ul></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;6-1-1继承&quot;&gt;&lt;a href=&quot;#6-1-1继承&quot; class=&quot;headerlink&quot; title=&quot;6.1.1继承&quot;&gt;&lt;/a&gt;6.1.1继承&lt;/h1&gt;&lt;p&gt;先看一个例子&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>java核心03-抽象类与接口</title>
    <link href="https://theme-next.js.org/%E6%8A%BD%E8%B1%A1%E7%B1%BB%E5%92%8C%E6%8E%A5%E5%8F%A3/"/>
    <id>https://theme-next.js.org/%E6%8A%BD%E8%B1%A1%E7%B1%BB%E5%92%8C%E6%8E%A5%E5%8F%A3/</id>
    <published>2021-05-02T23:13:24.000Z</published>
    <updated>2021-07-15T15:09:25.531Z</updated>
    
    <content type="html"><![CDATA[<h1 id="抽象类和接口"><a href="#抽象类和接口" class="headerlink" title="抽象类和接口"></a>抽象类和接口</h1><h2 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h2><p>类:</p><ul><li><p>一个完整健康的类:所有的方法都有实现（方法体）</p></li><li><p>类可以没有方法，但有方法就得实现，这才是一个完整的类</p></li><li><p>如果一个类暂时有方法未实现，需要被定义为抽象类</p></li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Shape</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> area;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">calArea</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>抽象类关键字abstract声明<ul><li>抽象类的组成，成员变量个数不限</li><li>具体方法，方法有实现，个数不限</li><li>抽象方法，加abstract关键字，个数不限</li></ul></li></ul><p>当图形未知时，无法给出calArea的具体实现，因此此方法定义为abstract</p><h2 id="抽象类2"><a href="#抽象类2" class="headerlink" title="抽象类2"></a>抽象类2</h2><ul><li><p>抽象类也是类，一个类继承于抽象类，就不能继承于其他的抽象类</p></li><li><p>子类可以继承于抽象类，但是一定要实现父类们所有abstract的方法。</p></li><li><p>如果不能完全实现，那么子类也必须被定义为抽象类</p></li><li><p>只有实现父类的所有抽象方法，才变成完整类，否则会报错</p></li></ul><h2 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h2><ul><li><p>如果类的所有方法都没有实现，那么这个类就算是接口</p></li><li><p>类可以实现多个接口，</p><p>例子：类c继承于类a，同时也实现接口b，c中的f1方法只会在a或c中实现</p></li><li><p>接口是特殊的类</p></li></ul><h2 id="接口2"><a href="#接口2" class="headerlink" title="接口2"></a>接口2</h2><ul><li><p>接口可以继承多个接口，没有实现的方法将会叠加</p></li><li><p>类实现接口，就必须实现所有未实现的方法。如果没有全部实现，那么只能成为一个抽象类（见ex4）</p><p>.ex1</p></li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Cat</span> <span class="keyword">implements</span> <span class="title">Animal</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Cat:I can eat&quot;</span>);</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">move</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Cat:I can move&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Animal接口中含有eat和move两个方法</p><p>.ex2</p> <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Animal</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">move</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>定义接口爬树</p><p>.ex3</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ClimbTree</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">climb</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>陆地动物</p><p>.ex4</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">LandAnimal</span> <span class="keyword">implements</span> <span class="title">Animal</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> abstact <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">move</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;I can walk bt feet&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>extends 必须写在implements前面</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Rabbit</span> <span class="keyword">extends</span> <span class="title">LandAnimal</span> <span class="keyword">implements</span> <span class="title">ClimbTree</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">climb</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;Rabbit:I can climb&quot;</span>);</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.our.println(<span class="string">&quot;Rabbit:I can eat&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一个类可以继承一个抽象类，同时实现一个接口</p><p>而一个接口可以继承多个接口</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">CatFamily</span> <span class="keyword">extends</span> <span class="title">Animal</span>,<span class="title">ClimbTree</span></span>&#123;</span><br><span class="line">    <span class="comment">//eat()</span></span><br><span class="line">    <span class="comment">//move()</span></span><br><span class="line">    <span class="comment">//climb()</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Tiger</span> <span class="keyword">implements</span> <span class="title">CatFamily</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;Tiger:I can eat&quot;</span>);</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">move</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;Tiger:I can move&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">climb</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;Tiger:I can climb&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><h3 id="抽象类和接口-1"><a href="#抽象类和接口-1" class="headerlink" title="抽象类和接口"></a>抽象类和接口</h3><h4 id="相同点"><a href="#相同点" class="headerlink" title="相同点:"></a>相同点:</h4><p>两者都不能被实例化，不嫩new操作</p><h4 id="不同点"><a href="#不同点" class="headerlink" title="不同点"></a>不同点</h4><p>抽象类abstract 接口interface</p><p>抽象类可以有部分方法实现，接口所有方法不能有实现，</p><p>一个类只能继承一个抽象类，实现多个接口</p><p>接口可以继承多个接口</p><p>抽象类有构造函数，接口没有构造函数</p><p>抽象类可以有main，也能运行，接口没有main函数</p><p>抽象类方法可以有private/protected，接口方法都是public</p><table><thead><tr><th align="center">特点\类型</th><th align="center">类</th><th align="center">抽象类</th><th align="center">接口</th></tr></thead><tbody><tr><td align="center">构造函数</td><td align="center">有</td><td align="center">无</td><td align="center">有</td></tr><tr><td align="center">加入main方法并运行</td><td align="center">可行</td><td align="center">可</td><td align="center">不能</td></tr><tr><td align="center">可以有private/protected</td><td align="center">是</td><td align="center">是</td><td align="center">不</td></tr><tr><td align="center">继承</td><td align="center">可以继承一个类</td><td align="center">可以继承一个类，只要不是密封类</td><td align="center">可以继承接口</td></tr><tr><td align="center">实现接口</td><td align="center">可以实现多个接口</td><td align="center">可以实现多个接口</td><td align="center">不能</td></tr><tr><td align="center">实现方法</td><td align="center">必须实现所有的方法</td><td align="center">可以有部分方法实现</td><td align="center">所有方法不能有实现</td></tr><tr><td align="center">实例化</td><td align="center">可以</td><td align="center">不可以</td><td align="center">不可以</td></tr><tr><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr></tbody></table>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;抽象类和接口&quot;&gt;&lt;a href=&quot;#抽象类和接口&quot; class=&quot;headerlink&quot; title=&quot;抽象类和接口&quot;&gt;&lt;/a&gt;抽象类和接口&lt;/h1&gt;&lt;h2 id=&quot;抽象类&quot;&gt;&lt;a href=&quot;#抽象类&quot; class=&quot;headerlink&quot; title=&quot;抽象类</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>java核心01-信息隐藏</title>
    <link href="https://theme-next.js.org/%E4%BF%A1%E6%81%AF%E9%9A%90%E8%97%8F%E5%8E%9F%E5%88%99%E5%92%8Cthis/"/>
    <id>https://theme-next.js.org/%E4%BF%A1%E6%81%AF%E9%9A%90%E8%97%8F%E5%8E%9F%E5%88%99%E5%92%8Cthis/</id>
    <published>2021-04-22T01:45:24.000Z</published>
    <updated>2021-07-15T13:41:28.465Z</updated>
    
    <content type="html"><![CDATA[<h1 id="信息隐藏原则和this"><a href="#信息隐藏原则和this" class="headerlink" title="信息隐藏原则和this"></a>信息隐藏原则和this</h1><h2 id="信息隐藏原则"><a href="#信息隐藏原则" class="headerlink" title="信息隐藏原则"></a>信息隐藏原则</h2><h3 id="面向对象有一个法则：信息隐藏"><a href="#面向对象有一个法则：信息隐藏" class="headerlink" title="面向对象有一个法则：信息隐藏"></a>面向对象有一个法则：信息隐藏</h3><ul><li>类的成员属性，是私有的private</li><li>类的方法是公有public的，通过方法修改成员属性的值</li></ul><p>eg. 信息隐藏：通过类的方法来间接访问类的属性，而不是直接访问类的属性</p><ul><li><p>类成员是私有的</p></li><li><p>get和set方法是公有的统称为getter setter</p></li><li><p>外界对类成员的操作只能通过get和set方法来操作</p></li></ul><h2 id="this"><a href="#this" class="headerlink" title="this"></a>this</h2><ul><li>this 负责指向本类中的成员变量</li><li>在构造函数里，形参的优先级更高</li></ul><p>~ example1:</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">InfoHiding</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">InfoHiding</span><span class="params">(<span class="keyword">int</span> id2)</span></span>&#123;</span><br><span class="line">        id=id2;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id2)</span></span>&#123;</span><br><span class="line">        id=id2;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>~ example2:</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InfoHiding</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">InfoHiding</span><span class="params">(<span class="keyword">int</span> id2)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id=id2;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id2)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id=id2;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>this 负责指向本类中的成员方法</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">this</span>.add(<span class="number">5</span>,<span class="number">3</span>);</span><br><span class="line"><span class="comment">//调用本类的add方法，this可以忽略</span></span><br></pre></td></tr></table></figure></li><li><p>this可以代替本类的构造函数</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">this</span>(<span class="number">5</span>);</span><br></pre></td></tr></table></figure><p>不影响歧义的情况下，this可以省略，参见example1</p></li></ul><p>总结一下，</p><ul><li><p>this可以指向本类中的成员变量</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">this</span>.x</span><br></pre></td></tr></table></figure></li><li><p>可以指向本类中的成员方法，</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">this</span>.x()</span><br></pre></td></tr></table></figure></li><li><p>可以当作构造函数使用</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">this</span>(x);</span><br></pre></td></tr></table></figure></li></ul><h2 id="Above-all"><a href="#Above-all" class="headerlink" title="Above all"></a>Above all</h2><ul><li>信息隐藏原则<ul><li>保护属性信息</li><li>公开行为信息</li></ul></li><li>this负责指向本类中的成员</li><li>this可以代替本类中的构造函数</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;信息隐藏原则和this&quot;&gt;&lt;a href=&quot;#信息隐藏原则和this&quot; class=&quot;headerlink&quot; title=&quot;信息隐藏原则和this&quot;&gt;&lt;/a&gt;信息隐藏原则和this&lt;/h1&gt;&lt;h2 id=&quot;信息隐藏原则&quot;&gt;&lt;a href=&quot;#信息隐藏原则&quot; cla</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>求职？</title>
    <link href="https://theme-next.js.org/%E6%B1%82%E8%81%8C%E8%AF%97%EF%BC%9F/"/>
    <id>https://theme-next.js.org/%E6%B1%82%E8%81%8C%E8%AF%97%EF%BC%9F/</id>
    <published>2021-04-12T21:45:24.000Z</published>
    <updated>2021-07-15T13:35:35.069Z</updated>
    
    <content type="html"><![CDATA[<h1 id="求职诗？"><a href="#求职诗？" class="headerlink" title="求职诗？"></a>求职诗？</h1><ul><li>鸣笛声伴随两道光芒</li><li>新的一天又将开始</li><li>又是掉下一撮头发</li><li>发际线又是后移</li><li>网络的新鲜感终将殆尽</li><li>又是刷手机到凌晨</li><li>可leetcode题刷了多少呢</li><li>还不是个菜鸡</li><li>梦，镜花水月一般；</li><li>若，浮光掠影之间</li><li>好像初出于人世间似的，</li><li>对一切的好奇</li><li>也许付出惨痛教训</li><li>对他人不切实际的期望</li><li>终将换来失望</li><li>我将为我的无知懵懂付出代价</li><li>有天之骄子吗</li><li>有失败人士吗</li><li>莫不是来自于无尽的比较嫉妒之螺旋</li><li>剑，那锋芒</li><li>断然不可为血肉消磨</li><li>不顾一切向前冲去</li><li>厮杀与广阔的战场，</li><li>即使战死</li><li>亦是神馈赠的命运，</li><li>我将欣然接受</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;求职诗？&quot;&gt;&lt;a href=&quot;#求职诗？&quot; class=&quot;headerlink&quot; title=&quot;求职诗？&quot;&gt;&lt;/a&gt;求职诗？&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;鸣笛声伴随两道光芒&lt;/li&gt;
&lt;li&gt;新的一天又将开始&lt;/li&gt;
&lt;li&gt;又是掉下一撮头发&lt;/li&gt;
&lt;li&gt;发</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>机器学习入门？</title>
    <link href="https://theme-next.js.org/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%C2%B7%E7%AE%97%E6%B3%95/"/>
    <id>https://theme-next.js.org/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%C2%B7%E7%AE%97%E6%B3%95/</id>
    <published>2021-04-02T22:42:24.000Z</published>
    <updated>2021-07-15T13:42:38.086Z</updated>
    
    <content type="html"><![CDATA[<h1 id="机器学习·算法"><a href="#机器学习·算法" class="headerlink" title="机器学习·算法"></a>机器学习·算法</h1><ul><li>参数不一样也是不同的模型</li></ul><ol><li><p>确定模型，设计模型：选定问题适合xx 模型 （model 如决策树，）</p></li><li><p>好坏标准（损失函数，loss function 学习就是学参数）</p></li><li><p>优化方法（预测能不能考上研，用已经考过研的同学的数据来训练，输入：？，输出（考上，不能考上））</p><ul><li><p>测试样本</p></li><li><p>历史数据，训练样本</p></li><li><p>训练的时候，二分类问题（神经网络,在训练网络上的好坏)</p></li><li><p>一万个同学的结果label</p></li><li><p>模型的label和真实label越接近越好</p></li><li><p>预测类别 准确率</p></li><li><p>误差</p></li><li><p>梯度下降</p></li><li><p>导数</p></li><li><p>函数极值点</p></li><li><p>优化方法</p></li><li><p>确定模型参数很多种选法</p></li><li><p>不可能把所有参数选一</p></li></ul></li></ol><ul><li><p>回归问题  目标函数输出是数值，（预测明天pm2.5的值）</p></li><li><p>分类问题 (预测明天pm2.5达不达标)</p></li><li><p>时间序列问题：在一个序列上解决的</p></li><li><p>怎么确定训练数据</p><ul><li><p>拿到去年一年的数据</p></li><li><p>三天一组</p></li><li><p>构造训练数据</p></li><li><p>一个月的pm2.5值</p></li></ul></li><li><p>slide-window 滑动窗口法</p><ul><li>2号三号一个 四号一个</li></ul></li><li><p>二分类==》多分类</p></li><li><p>大于2就叫多分类</p></li><li><p>实验 二分类</p></li><li><p>垃圾邮件过滤</p><ul><li><p>正样本和负样本的数量是差别很大的</p></li><li><p>非均衡样本使得你模型的效果不太好</p><p>垃圾邮件过滤</p><p>写规则</p><p>赌博，黄色</p><p>一堆专利</p><p>不写规则，让程序理解语义</p></li></ul></li><li><p> 输出的</p></li></ul><ul><li>alphago 分类问题</li><li>alphago确定棋子下到棋盘的几个位置</li><li>最基本的是学习能力</li><li>强化学习，自己和自己下</li></ul><ul><li><p>无监督：学习 如考试题没给答案</p></li><li></li><li><p>有监督：有标签的，有训练样本</p></li><li><p>半监督：样本有一部分有标签，有一部分没有标签</p></li><li><p>for example recognizing cats and dogs</p></li><li><p>迁移学习 </p></li><li><p>完全</p></li><li><p>没有训练样本，无监督学习</p></li></ul><p>强化学习</p><ul><li>当话务员，不知道该说什么，客户说一个问题你回答，客户再说一个问题你还回答，知道这个是不对的，非常差的反馈知道自己是错的</li><li>客户反馈不行知道错的，客户反馈可以知道还行</li></ul><p>Alphago </p><p>监督学习 ：棋谱 样本</p><p>强化学习： 自己和自己下棋</p><p>AlphaZero</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;机器学习·算法&quot;&gt;&lt;a href=&quot;#机器学习·算法&quot; class=&quot;headerlink&quot; title=&quot;机器学习·算法&quot;&gt;&lt;/a&gt;机器学习·算法&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;参数不一样也是不同的模型&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;确定模型，设计模</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>泡影</title>
    <link href="https://theme-next.js.org/%E6%B3%A1%E5%BD%B1/"/>
    <id>https://theme-next.js.org/%E6%B3%A1%E5%BD%B1/</id>
    <published>2021-03-22T12:57:09.000Z</published>
    <updated>2021-03-22T05:34:51.949Z</updated>
    
    <content type="html"><![CDATA[<h1 id="色散"><a href="#色散" class="headerlink" title="色散"></a>色散</h1><h2 id="献给喜欢过却没有去追的女同学"><a href="#献给喜欢过却没有去追的女同学" class="headerlink" title="献给喜欢过却没有去追的女同学"></a>献给喜欢过却没有去追的女同学</h2><ul><li>光</li><li>散成那彩虹</li><li>天空高悬</li><li>望这那粼粼水波</li><li>我对此物的思念</li><li>绵延至今</li><li></li><li>浮沉于水中</li><li>好像丢失了什么</li><li>我强做镇定</li><li>内心满是创痕</li><li></li><li>过去的梦</li><li>已然消散</li><li>一颗新的梦种已然种下</li><li></li><li>不敢全然去追</li><li>我还是过于审慎</li><li></li><li>浮现了</li><li>那朦胧的美好</li><li>又消失在无尽深处</li><li></li><li>沉沦于湖底</li><li>好像精神之光</li><li>已经熄灭</li><li></li><li>湛蓝色的晴空</li><li>望不到边</li><li>我无尽的遐想</li><li>不会熄灭</li><li>有渴望之物也不会去追</li><li>害怕破碎</li><li></li><li>五彩斑斓的幻想</li><li>是否能与现实妥协</li><li>交融成我能接受的形态</li><li></li><li>不愿</li><li>我的光芒</li><li>不愿你散开啊</li><li>白虹贯日</li><li>也不怨你</li><li></li><li>我午夜的无病呻吟</li><li>如魔掌贯穿心脏</li><li>那倒影</li><li>那光的色散</li><li>我的幻梦</li><li>尚存心间</li><li></li><li>那光芒将要散去</li><li>我的步伐难追</li><li>我将乘好自己的路</li><li>世间亦有其他的光芒</li><li>等待我去追</li><li>感谢你对我的刺激</li><li>我会加油的</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;色散&quot;&gt;&lt;a href=&quot;#色散&quot; class=&quot;headerlink&quot; title=&quot;色散&quot;&gt;&lt;/a&gt;色散&lt;/h1&gt;&lt;h2 id=&quot;献给喜欢过却没有去追的女同学&quot;&gt;&lt;a href=&quot;#献给喜欢过却没有去追的女同学&quot; class=&quot;headerlink&quot; titl</summary>
      
    
    
    
    
  </entry>
  
</feed>
